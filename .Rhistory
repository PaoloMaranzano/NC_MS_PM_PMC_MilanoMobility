png(filename = "Cluster_metrics.png", width = 800, height = 1000)
ggarrange(p1,p2,p3,p4,p5,p6,p7,p8,p9,ncol = 3,nrow = 3)
dev.off()
############################################
########## Mapping of the results ##########
############################################
## Load shape Milano
library(sf)
Quartieri <- read_sf("Quartieri_Milano/Quartieri_Milano.shp",
quiet = FALSE) %>% st_transform(crs = 4326) %>%
rename(IdNIL = ID_NIL)
output <- data.frame(output)
Quartieri_cluster <- full_join(Quartieri, output, by="IdNIL")
Quartieri_cluster <- Quartieri_cluster %>%
mutate(Group_JJI = case_when(k_kmeans_opt_JJI == 3 ~ "Medium-low",
k_kmeans_opt_JJI == 4 ~ "High",
k_kmeans_opt_JJI == 1 ~ "Low",
k_kmeans_opt_JJI == 2 ~ "Medium-high",
is.na(k_kmeans_opt_JJI) ~ "Outlier"),
Group_AMPI = case_when(k_kmeans_opt_AMPI == 3 ~ "Low",
k_kmeans_opt_AMPI == 4 ~ "High",
k_kmeans_opt_AMPI == 2 ~ "Medium-high",
k_kmeans_opt_AMPI == 1 ~ "Medium-low",
is.na(k_kmeans_opt_AMPI) ~ "Outlier"),
Group_JJIAMPI = case_when(k_kmeans_opt_JJIAMPI == 3 ~ "Medium-low",
k_kmeans_opt_JJIAMPI == 1 ~ "Low",
k_kmeans_opt_JJIAMPI == 4 ~ "High",
k_kmeans_opt_JJIAMPI == 2 ~ "Medium-high",
is.na(k_kmeans_opt_JJIAMPI) ~ "Outlier")) %>%
select(IdNIL, NIL, Group_JJI, Group_AMPI, Group_JJIAMPI)
Quartieri_cluster_df <- Quartieri_cluster
st_geometry(Quartieri_cluster_df) <- NULL
library(xtable)
Quartieri_cluster_df <- Quartieri_cluster_df %>%
arrange(IdNIL) %>%
select(-c(IdNIL))
write_csv(x = Quartieri_cluster_df, file = "NILS_clusters.csv", col_names = T)
Cluster_grp <- xtable(Quartieri_cluster_df,
caption = paste0("Cluster results using Jevons only, AMPI only and Jevons+AMPI, respectively"),
align=c("l","l","c","c","c"))
Cluster_grp
# Graphical parameters
fills <- c("Outlier" = "white",
"High" = "#1F3457",
"Medium-high"="#F1625F",
"Medium-low"="#9D9A99",
"Low"="#CBE8DD")
#Generate the maps for the 3 clustering
#JJI cluster map
Quartieri_cluster$Group_JJI <- factor(Quartieri_cluster$Group_JJI,
levels = c("High", "Medium-high", "Medium-low",
"Low", "Outlier"))
JJI_cluster <- ggplot()+
geom_sf(data = Quartieri_cluster, aes(fill = Group_JJI), show.legend = "point")+
theme_void()+
ggtitle('\n1. K-means: Jevons static index (K=4)') +
theme(plot.title = element_text(size = 20, face = "bold")) +
scale_fill_manual(values=fills, labels=c("Outlier","High", "Medium-high", "Medium-low", "Low"), name="Clusters:") +
guides(fill = guide_legend(override.aes = list(shape = 21, size = 5))) +
theme(legend.position="bottom") +
theme(legend.title = element_text(face="bold", size=15)) +
theme(legend.key.size = unit(0.7, "cm")) +
theme(legend.text=element_text(size=13)) +
guides(color = guide_legend(override.aes = list(size = 5))) +
theme(aspect.ratio=3/4)
JJI_cluster
#AMPI cluster map
Quartieri_cluster$Group_AMPI <- factor(Quartieri_cluster$Group_AMPI,
levels = c("High", "Medium-high", "Medium-low",
"Low", "Outlier"))
AMPI_cluster <- ggplot()+
geom_sf(data = Quartieri_cluster, aes(fill = Group_AMPI), show.legend = "point")+
theme_void()+
ggtitle('\n2. K-means: AMPI index (K=4)') +
theme(plot.title = element_text(size = 20, face = "bold")) +
scale_fill_manual(values=fills, labels=c("Outlier","High", "Medium-high", "Medium-low", "Low"), name="Clusters:") +
guides(fill = guide_legend(override.aes = list(shape = 21, size = 5))) +
theme(legend.position="bottom") +
theme(legend.title = element_text(face="bold", size=15)) +
theme(legend.key.size = unit(0.7, "cm")) +
theme(legend.text=element_text(size=13)) +
guides(color = guide_legend(override.aes = list(size = 5))) +
theme(aspect.ratio=3/4)
AMPI_cluster
#JJI AMPI cluster map
Quartieri_cluster$Group_JJIAMPI <- factor(Quartieri_cluster$Group_JJIAMPI,
levels = c("High", "Medium-high", "Medium-low",
"Low", "Outlier"))
JJI_AMPI_cluster <- ggplot()+
geom_sf(data = Quartieri_cluster, aes(fill = Group_JJIAMPI), show.legend = "point")+
theme_void()+
ggtitle('\n3. K-means: JJI+AMPI index (K=4)') +
theme(plot.title = element_text(size = 20, face = "bold")) +
scale_fill_manual(values=fills, labels=c("Outlier","High", "Medium-high", "Medium-low", "Low"), name="Clusters:") +
guides(fill = guide_legend(override.aes = list(shape = 21, size = 5))) +
theme(legend.position="bottom") +
theme(legend.title = element_text(face="bold", size=15)) +
theme(legend.key.size = unit(0.7, "cm")) +
theme(legend.text=element_text(size=13)) +
guides(color = guide_legend(override.aes = list(size = 5))) +
theme(aspect.ratio=3/4)
JJI_AMPI_cluster
#combine the maps together
library(cowplot)
Map_cluster <- plot_grid(
JJI_cluster, AMPI_cluster, JJI_AMPI_cluster, ncol = 1)
#Save the maps
ggsave(Map_cluster, file= "Map_cluster.png", width = 32, height = 60, units = "cm")
#################################################################################
cor(Quartieri_cluster$JJI,Quartieri_cluster$AMPI, use = "pairwise.complete.obs")
#CAMBIARE VALORE CORRELAZIONE
png("Correlation.png", width = 40, height = 20, res = 800, units = 'cm')
ggplot(data = IndexClust, aes(x=JJI, y=AMPI)) +
geom_point(lwd=3) +
geom_smooth(method = "lm", se = FALSE, lwd=1.5) +
geom_text(mapping = aes(x = 3, y=5), size=7,label = "Linear correlation", col="#000099") +
geom_text(mapping = aes(x = 3, y=4.5), size=7,
label = expression(paste(rho,"=0.4615")), col="#000099") +
labs(title = "Adjusted Mazziota-Pareto Index VS Jevons Static Index",
subtitle = "Estimated values and linear correlation",
x="Standardized JJI", y="Standardized AMPI") +
theme(
axis.title.y=element_text(color="black", size=14),
axis.text.y=element_text(color="black", size=12),
axis.title.x=element_text(color="black", size=14),
axis.text.x=element_text(color="black"),
title = element_text(size=16))
dev.off()
library(readr)
library(tidyverse)
library(sf)
library(spatialEco)
setwd("C:/Users/paulm/OneDrive/Documenti/GitHub/NC_MS_PM_PMC_MilanoMobility")
install.packages("spatialEco")
library(readr)
library(tidyverse)
library(sf)
library(spatialEco)
setwd("C:/Users/paulm/OneDrive/Documenti/GitHub/NC_MS_PM_PMC_MilanoMobility")
##### Dataset used for K-means clustering
DataClusters <- read_csv("NILS_DataCluster.csv")
DataClusters <- DataClusters %>%
select(IdNIL,JJI,Media01,IMG,AMPI)
##### K-means output
Clusters <- read_csv("NILS_clusters.csv")
Clusters <- Clusters %>%
select(-c(NIL))
library(readr)
library(tidyverse)
library(sf)
library(spatialEco)
setwd("C:/Users/paulm/OneDrive/Documenti/GitHub/NC_MS_PM_PMC_MilanoMobility")
##### Dataset used for K-means clustering
DataClusters <- read_csv("NILS_DataCluster.csv")
DataClusters <- DataClusters %>%
select(IdNIL,JJI,Media01,IMG,AMPI)
##### K-means output
Clusters <- read_csv("NILS_clusters.csv")
Clusters <- Clusters %>%
select(-c(NIL))
##### Services data
Services <- read_csv("Services.csv", col_types = cols(...1 = col_skip()))
##### Join
Data <- full_join(x = Services, y = Clusters, by = "IdNIL")
Data <- full_join(x = Data, y = DataClusters, by = "IdNIL")
##### Join
Data <- full_join(x = Services, y = Clusters, by = "IdNIL")
######## Smart mobility in Milan, Italy. A cluster analysis at district level.
# October 2022
# Italian Journal of Applied Statistics
### Caricamento dati e pacchetti utili all'analisi
library(readr)
library(tidyverse)
library(ggplot2)
library(ggpubr)
library(readxl)
library(sf)
'%notin%' <- Negate('%in%')
setwd("C:/Users/paulm/OneDrive/Documenti/GitHub/NC_MS_PM_PMC_MilanoMobility")
Ind_grezzi <- read_excel("MobMi3.xlsx")
Ind_grezzi <- Ind_grezzi %>%
rename(IdNIL = IdNil)
Index <- read_excel("Index_new.xlsx")
# colnames(Ind_grezzi)[1] = 'IdNIL'
Index <- inner_join(Index, Ind_grezzi, by="IdNIL")
Index_original <- Index
# Escludiamo i quartieri poco abitati
Index <- Index %>%
filter(IdNIL %notin% c(3,8,39,47,75,86,87)) %>%
select(-c(Nil))
write_csv(x = Index_original, file = "NILS_DataCluster.csv", col_names = T)
##############################################################
########## Cluster analisys non gerarchica: K-means ##########
##############################################################
library(cluster)
library(stats)
library(fpc)
library(factoextra)
IndexClust <- Index %>%
column_to_rownames(.,'NIL') %>%     # Assegno il nome alle righe usando la variabile codice
scale(.,center=T,scale=T) %>%       # Standardizzo Z = (X - mu)/sigma
data.frame(.)
##### Matrice delle distanze tra le unità usando JJI
IndexClust_JJI <- IndexClust %>%
dplyr::select(JJI)
distance_JJI <- get_dist(IndexClust_JJI)
fviz_dist(distance_JJI, gradient = list(low="white", mid="grey", high="black"))
##### Matrice delle distanze tra le unità usando AMPI
IndexClust_AMPI <- IndexClust %>%
dplyr::select(AMPI)
distance_AMPI <- get_dist(IndexClust_AMPI)
fviz_dist(distance_AMPI, gradient = list(low="white", mid="grey", high="black"))
##### Matrice delle distanze tra le unità usando JJI + AMPI
IndexClust_JJIAMPI <- IndexClust %>%
dplyr::select(AMPI,JJI)
distance_JJIAMPI <- get_dist(IndexClust_JJIAMPI)
fviz_dist(distance_JJIAMPI, gradient = list(low="white", mid="grey", high="black"))
###################################################################################################
########## Identificazione (statistica) del numero ottimale di gruppi: package 'NbClust' ##########
###################################################################################################
library(factoextra)
library(NbClust)
k <- 4
########################
##### Jevons Index #####
########################
## Calcolo degli indicatori di performance per k-means e Ward
nb_kmeans_JJI <- NbClust(IndexClust_JJI, distance = "euclidean", min.nc = 2, max.nc = 6,
method = "kmeans",
index ="all")
## "Regola della maggioranza"
p1 <- fviz_nbclust(IndexClust_JJI, kmeans, nstart = 25,  method = "gap_stat", nboot = 100) +
labs(subtitle = "Gap statistic method", title = "JJI index")
p2 <- fviz_nbclust(nb_kmeans_JJI,method = "silhouette") +
labs(subtitle = "Silhouette", title = "JJI index") +
scale_x_discrete(name ="Dose (mg)", limits=factor(c(3,4)))
p3 <- fviz_nbclust(nb_kmeans_JJI,method = "wss") +
labs(subtitle = "Majority rule-of-thumb", title = "JJI index") +
scale_x_discrete(name ="Dose (mg)", limits=factor(c(3,4)))
## Numero di clusters ottimali per ogni metodo
nb_kmeans_JJI$Best.nc
## "Regola della maggioranza"
fviz_nbclust(nb_kmeans_JJI)
## suddivisione ottimale delle unitÃ 
nb_kmeans_JJI$Best.partition
### Optimal number of groups: 5
clust_k5_JJI <- kmeans(IndexClust_JJI, centers=k, nstart = 50) # 5 gruppi
## Optimal clusters
output_JJI <- cbind(k_kmeans_opt_JJI = clust_k5_JJI$cluster)
output <- cbind(IdNIL = Index$IdNIL, output_JJI)
######################
##### AMPI Index #####
######################
## Calcolo degli indicatori di performance per k-means e Ward
nb_kmeans_AMPI <- NbClust(IndexClust_AMPI, distance = "euclidean", min.nc = 2, max.nc = 6,
method = "kmeans", index ="all")
## Numero di clusters ottimali per ogni metodo
nb_kmeans_AMPI$Best.nc
## "Regola della maggioranza"
p4 <- fviz_nbclust(IndexClust_AMPI, kmeans, nstart = 25,  method = "gap_stat", nboot = 100) +
labs(subtitle = "Gap statistic method", title = "AMPI index")
p5 <- fviz_nbclust(nb_kmeans_AMPI,method = "silhouette") +
labs(subtitle = "Silhouette", title = "AMPI index") +
scale_x_discrete(name ="Dose (mg)", limits=factor(c(3,4)))
p6 <- fviz_nbclust(nb_kmeans_AMPI,method = "wss") +
labs(subtitle = "Majority rule-of-thumb", title = "AMPI index") +
scale_x_discrete(name ="Dose (mg)", limits=factor(c(3,4)))
## suddivisione ottimale delle unità
nb_kmeans_AMPI$Best.partition
### Optimal number of groups: 3 --> use 5 for completeness
clust_k5_AMPI <- kmeans(IndexClust_AMPI, centers=k, nstart = 50) # 5 gruppi
## Optimal clusters
output <- cbind(output, k_kmeans_opt_AMPI = clust_k5_AMPI$cluster)
############################
##### JJI + AMPI Index #####
############################
## Calcolo degli indicatori di performance per k-means e Ward
nb_kmeans_JJIAMPI <- NbClust(IndexClust_JJIAMPI, distance = "euclidean", min.nc = 2, max.nc = 6,
method = "kmeans", index ="all")
## "Regola della maggioranza"
p7<- fviz_nbclust(IndexClust_JJIAMPI, kmeans, nstart = 25,  method = "gap_stat", nboot = 100) +
labs(subtitle = "Gap statistic method", title = "JJI+AMPI index")
p8 <- fviz_nbclust(nb_kmeans_JJIAMPI,method = "silhouette") +
labs(subtitle = "Silhouette", title = "JJI+AMPI index") +
scale_x_discrete(name ="Dose (mg)", limits=factor(c(3,4)))
p9 <- fviz_nbclust(nb_kmeans_JJIAMPI,method = "wss") +
labs(subtitle = "Majority rule-of-thumb", title = "JJI+AMPI index") +
scale_x_discrete(name ="Dose (mg)", limits=factor(c(3,4)))
## Numero di clusters ottimali per ogni metodo
nb_kmeans_AMPI$Best.nc
## "Regola della maggioranza"
fviz_nbclust(nb_kmeans_JJIAMPI)
## suddivisione ottimale delle unità
nb_kmeans_AMPI$Best.partition
### Optimal number of groups: 3 --> use 5 for completeness
clust_k5_JJIAMPI <- kmeans(IndexClust_JJIAMPI, centers=k, nstart = 50) # 5 gruppi
## Optimal clusters
output <- cbind(output, k_kmeans_opt_JJIAMPI = clust_k5_JJIAMPI$cluster)
png(filename = "Cluster_metrics.png", width = 800, height = 1000)
ggarrange(p1,p2,p3,p4,p5,p6,p7,p8,p9,ncol = 3,nrow = 3)
dev.off()
############################################
########## Mapping of the results ##########
############################################
## Load shape Milano
library(sf)
Quartieri <- read_sf("Quartieri_Milano/Quartieri_Milano.shp",
quiet = FALSE) %>% st_transform(crs = 4326) %>%
rename(IdNIL = ID_NIL)
output <- data.frame(output)
Quartieri_cluster <- full_join(Quartieri, output, by="IdNIL")
Quartieri_cluster <- Quartieri_cluster %>%
mutate(Group_JJI = case_when(k_kmeans_opt_JJI == 3 ~ "Medium-low",
k_kmeans_opt_JJI == 4 ~ "High",
k_kmeans_opt_JJI == 1 ~ "Low",
k_kmeans_opt_JJI == 2 ~ "Medium-high",
is.na(k_kmeans_opt_JJI) ~ "Outlier"),
Group_AMPI = case_when(k_kmeans_opt_AMPI == 3 ~ "Low",
k_kmeans_opt_AMPI == 4 ~ "High",
k_kmeans_opt_AMPI == 2 ~ "Medium-high",
k_kmeans_opt_AMPI == 1 ~ "Medium-low",
is.na(k_kmeans_opt_AMPI) ~ "Outlier"),
Group_JJIAMPI = case_when(k_kmeans_opt_JJIAMPI == 3 ~ "Medium-low",
k_kmeans_opt_JJIAMPI == 1 ~ "Low",
k_kmeans_opt_JJIAMPI == 4 ~ "High",
k_kmeans_opt_JJIAMPI == 2 ~ "Medium-high",
is.na(k_kmeans_opt_JJIAMPI) ~ "Outlier")) %>%
select(IdNIL, NIL, Group_JJI, Group_AMPI, Group_JJIAMPI)
Quartieri_cluster_df <- Quartieri_cluster
st_geometry(Quartieri_cluster_df) <- NULL
library(xtable)
write_csv(x = Quartieri_cluster_df, file = "NILS_clusters.csv", col_names = T)
Quartieri_cluster_df <- Quartieri_cluster_df %>%
arrange(IdNIL) %>%
select(-c(IdNIL))
Cluster_grp <- xtable(Quartieri_cluster_df,
caption = paste0("Cluster results using Jevons only, AMPI only and Jevons+AMPI, respectively"),
align=c("l","l","c","c","c"))
Cluster_grp
# Graphical parameters
fills <- c("Outlier" = "white",
"High" = "#1F3457",
"Medium-high"="#F1625F",
"Medium-low"="#9D9A99",
"Low"="#CBE8DD")
#Generate the maps for the 3 clustering
#JJI cluster map
Quartieri_cluster$Group_JJI <- factor(Quartieri_cluster$Group_JJI,
levels = c("High", "Medium-high", "Medium-low",
"Low", "Outlier"))
JJI_cluster <- ggplot()+
geom_sf(data = Quartieri_cluster, aes(fill = Group_JJI), show.legend = "point")+
theme_void()+
ggtitle('\n1. K-means: Jevons static index (K=4)') +
theme(plot.title = element_text(size = 20, face = "bold")) +
scale_fill_manual(values=fills, labels=c("Outlier","High", "Medium-high", "Medium-low", "Low"), name="Clusters:") +
guides(fill = guide_legend(override.aes = list(shape = 21, size = 5))) +
theme(legend.position="bottom") +
theme(legend.title = element_text(face="bold", size=15)) +
theme(legend.key.size = unit(0.7, "cm")) +
theme(legend.text=element_text(size=13)) +
guides(color = guide_legend(override.aes = list(size = 5))) +
theme(aspect.ratio=3/4)
JJI_cluster
#AMPI cluster map
Quartieri_cluster$Group_AMPI <- factor(Quartieri_cluster$Group_AMPI,
levels = c("High", "Medium-high", "Medium-low",
"Low", "Outlier"))
AMPI_cluster <- ggplot()+
geom_sf(data = Quartieri_cluster, aes(fill = Group_AMPI), show.legend = "point")+
theme_void()+
ggtitle('\n2. K-means: AMPI index (K=4)') +
theme(plot.title = element_text(size = 20, face = "bold")) +
scale_fill_manual(values=fills, labels=c("Outlier","High", "Medium-high", "Medium-low", "Low"), name="Clusters:") +
guides(fill = guide_legend(override.aes = list(shape = 21, size = 5))) +
theme(legend.position="bottom") +
theme(legend.title = element_text(face="bold", size=15)) +
theme(legend.key.size = unit(0.7, "cm")) +
theme(legend.text=element_text(size=13)) +
guides(color = guide_legend(override.aes = list(size = 5))) +
theme(aspect.ratio=3/4)
AMPI_cluster
#JJI AMPI cluster map
Quartieri_cluster$Group_JJIAMPI <- factor(Quartieri_cluster$Group_JJIAMPI,
levels = c("High", "Medium-high", "Medium-low",
"Low", "Outlier"))
JJI_AMPI_cluster <- ggplot()+
geom_sf(data = Quartieri_cluster, aes(fill = Group_JJIAMPI), show.legend = "point")+
theme_void()+
ggtitle('\n3. K-means: JJI+AMPI index (K=4)') +
theme(plot.title = element_text(size = 20, face = "bold")) +
scale_fill_manual(values=fills, labels=c("Outlier","High", "Medium-high", "Medium-low", "Low"), name="Clusters:") +
guides(fill = guide_legend(override.aes = list(shape = 21, size = 5))) +
theme(legend.position="bottom") +
theme(legend.title = element_text(face="bold", size=15)) +
theme(legend.key.size = unit(0.7, "cm")) +
theme(legend.text=element_text(size=13)) +
guides(color = guide_legend(override.aes = list(size = 5))) +
theme(aspect.ratio=3/4)
JJI_AMPI_cluster
#combine the maps together
library(cowplot)
Map_cluster <- plot_grid(
JJI_cluster, AMPI_cluster, JJI_AMPI_cluster, ncol = 1)
#Save the maps
ggsave(Map_cluster, file= "Map_cluster.png", width = 32, height = 60, units = "cm")
#################################################################################
png("Correlation.png", width = 40, height = 20, res = 800, units = 'cm')
ggplot(data = IndexClust, aes(x=JJI, y=AMPI)) +
geom_point(lwd=3) +
geom_smooth(method = "lm", se = FALSE, lwd=1.5) +
geom_text(mapping = aes(x = 3, y=5), size=7,label = "Linear correlation", col="#000099") +
geom_text(mapping = aes(x = 3, y=4.5), size=7,
label = expression(paste(rho,"=0.4615")), col="#000099") +
labs(title = "Adjusted Mazziota-Pareto Index VS Jevons Static Index",
subtitle = "Estimated values and linear correlation",
x="Standardized JJI", y="Standardized AMPI") +
theme(
axis.title.y=element_text(color="black", size=14),
axis.text.y=element_text(color="black", size=12),
axis.title.x=element_text(color="black", size=14),
axis.text.x=element_text(color="black"),
title = element_text(size=16))
dev.off()
gc()
library(readr)
library(tidyverse)
library(sf)
library(spatialEco)
setwd("C:/Users/paulm/OneDrive/Documenti/GitHub/NC_MS_PM_PMC_MilanoMobility")
##### Dataset used for K-means clustering
DataClusters <- read_csv("NILS_DataCluster.csv")
DataClusters <- DataClusters %>%
select(IdNIL,JJI,Media01,IMG,AMPI)
##### K-means output
Clusters <- read_csv("NILS_clusters.csv")
Clusters <- Clusters %>%
select(-c(NIL))
##### Services data
Services <- read_csv("Services.csv", col_types = cols(...1 = col_skip()))
##### Join
Data <- full_join(x = Services, y = Clusters, by = "IdNIL")
Data <- full_join(x = Data, y = DataClusters, by = "IdNIL")
##### Shape file
Quartieri <- read_sf("Quartieri_Milano/Quartieri_Milano.shp",
quiet = FALSE) %>%
st_transform(crs = 4326) %>%
select(IdNIL = ID_NIL)
Data <- inner_join(Quartieri, Data, by="IdNIL")
Data_point <- st_point_on_surface(x = Data)
Centr_coords <- st_coordinates(Data_point)
mtx_distance <- st_distance(Data_point, Data_point)
mtx_distance_pearson <- matrix(data = 1/dim(Centr_coords)[1],
nrow = nrow(mtx_distance),ncol = ncol(mtx_distance))
install.packages("s2")
Data_point <- st_point_on_surface(x = Data)
Centr_coords <- st_coordinates(Data_point)
mtx_distance <- st_distance(Data_point, Data_point)
mtx_distance_pearson <- matrix(data = 1/dim(Centr_coords)[1],
nrow = nrow(mtx_distance),ncol = ncol(mtx_distance))
##### Spatial cross-correlation
X_names <- c("Area","Population","Pop_density","N_Hospitals","N_Hospital_beds",
"N_Stations","N_Uni_campus","N_Uni_headquarters","N_Schools","N_Schools_students",
"N_Hotels","N_Hotels_rooms","N_Hotels_beds")
Y_names <- c("AMPI","JJI","Media01","IMG")
Cor_list <- vector("list", length = length(Y_names))
Cor_mat <- matrix(data = NA, ncol = 5, nrow = length(X_names))
rownames(Cor_mat) <- X_names
colnames(Cor_mat) <- c("Index","Variable","Rc","Rp","R0")
Cor_mat <- data.frame(Cor_mat)
for (i in 1:length(Y_names)) {
for (j in 1:length(X_names)) {
print(paste0("Y = ",Y_names[i]," e X = ",X_names[j]))
r_temp <- crossCorrelation(x = Data_point[[X_names[j]]], y = Data_point[[Y_names[i]]],
type =  "LSCI",coords = Centr_coords,
k = 999, scale.partial = T, scale.matrix = T,
dist.function = "inv.power",  clust = T)
x <- as.vector(scale(Data_point[[X_names[j]]],center = T,scale = T))
y <- as.vector(scale(Data_point[[Y_names[i]]],center = T,scale = T))
R0 <- cor(x,y)
Rc <- r_temp$I
Rp <- R0 - Rc
Cor_mat[j,] <- cbind(Y_names[i],X_names[j],Rc,Rp,R0)
}
Cor_list[[i]] <- Cor_mat
}
SpatCorr <- bind_rows(Cor_list)
rownames(SpatCorr) <- NULL
SpatCorr <- SpatCorr %>%
mutate(across(c(Rc,Rp,R0),as.numeric),
across(c(Rc,Rp,R0),~ round(.x,digits = 3))) %>%
arrange(R0)
SpatCorr %>%
View()
library(xtable)
SpatCorr_latex <- xtable(SpatCorr,
caption = paste0("Spatial cross-correlation results."),
align=c("l","l","l","c","c","c"))
SpatCorr_latex
x <- as.vector(scale(Data_point[["N_Hotels"]],center = T,scale = T))
y <- as.vector(scale(Data_point[["JJI"]],center = T,scale = T))
# ## 2. Filtro di Hampel
# soglia <- 1.4826*3*median(abs((x - median(x))))
# # Posizione dei valori anomali
# pos_out_Hampel <- which(abs(x - median(x)) > soglia)
spcor_hotel <- crossCorrelation(x = x, y = y,
type =  "LSCI",coords = Centr_coords,
k = 999, scale.partial = T, scale.matrix = T,
dist.function = "inv.power",  clust = T)
plot(spcor_hotel$SCI[,1],spcor_hotel$SCI[,2])
abline(h = 0,col="red", lwd=2)
abline(v = 0, col="red", lwd=2)
